==================
Causal Consistency
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

In this guide, you can learn about **causal consistency** in MongoDB.

Causal Consistency
------------------

If one operation influences a subsequent read or write
operation, these two operations have a causal relationship.
For example, updating stock quantity *after* checking to ensure enough
stock to fulfill a purchase order is a causal relationship.

**Causal consistency** is the notion that all causally-related operations
should appear in the same order on all processes - that means every
member of a replica set or sharded cluster in MongoDB. Single node
databases - where only one node (or server) is running - are naturally causally
consistent.

To maintain causal consistency, the following guarantees must be satisfied:

.. list-table::
   :header-rows: 0
   :stub-columns: 1

   * - **Read your writes**
     - Read operations reflect the results of write operations that precede them.
   * - **Monotonic reads**
     - Read operations do not return results that correspond to an earlier
       state of the data than a preceding read operation.
   * - **Monotonic writes**
     - Write operations that must precede other writes are executed before those
       other writes.
   * - **Writes follow reads**
     - Write operations that must occur after read operations are executed after
       those read operations.

Benefits
~~~~~~~~

To understand the benefits of causal consistency and whether you require it,
consider the following example where **no** causal ordering is enforced.

The distributed system depicted below is a replica set with a primary (or leader)
that accepts all incoming client *writes* and two secondaries (or followers) that
replicate those writes. Any member of the replica set may service client *reads*.

.. figure:: /figures/replica_set_no_causal.png
   :alt: An image showing a replica set with no causal consistency guarantees.

   Figure 1. Flow of Operations in a Replica Set without Enforced Causal Consistency

   1. The client application writes order **234** to the primary.
   2. The primary responds that it has successfully applied the write.
   3. Order **234** is replicated to one of the secondaries.
   4. The client application reads the orders collection on a secondary.
   5. The targeted secondary hasn't seen order **234**, so it responds with no results.
   6. Order **234** is replicated from the primary to the other secondary.


To provide causal consistency, MongoDB uses **sessions**.

Sessions
~~~~~~~~
